//Requires policy to read update dynamo
//requires api gateway
//kms key access needed also

const AWS = require('aws-sdk');
const dynamoDB = new AWS.DynamoDB();

const formatDate = (date) => {
    const year = date.getFullYear();
    const month = String(date.getMonth() + 1).padStart(2, '0');
    const day = String(date.getDate()).padStart(2, '0');
    return `${year}-${month}-${day}`;
};

exports.handler = async (event) => {
    try {
        console.log('Received event:', JSON.stringify(event, null, 2));

        const queryStringParameters = event.queryStringParameters;
        console.log('Query string parameters:', queryStringParameters);

        const workOrderId = queryStringParameters?.workOrderId;
        const employeeName = queryStringParameters?.employeeName;
        const profile = queryStringParameters?.profile;
        const response = queryStringParameters?.response;

        /// Logging
        console.log('workOrderId:', workOrderId);
        console.log('employeeName:', employeeName);
        console.log('profile:', profile);
        console.log('response:', response);

        ////missing id ?
        if (!workOrderId) {
            return {
                statusCode: 400,
                body: JSON.stringify({
                    message: 'Missing workOrderId in query parameters.'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }

        const params = {
            TableName: 'WorkOrder-5hshopfsv5f6vbfshkkgwtlxfq-staging',
            Key: {
                'id': { S: workOrderId }
            },
            ProjectionExpression: 'closedBy, closedDate, approvedBy'
        };

        const data = await dynamoDB.getItem(params).promise();

        ///work order exists
        if (!data.Item) {
            return {
                statusCode: 200,
                body: JSON.stringify({
                    message: `Work order with ID ${workOrderId} not found.`
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }

        const closedBy = data.Item.closedBy?.S || null;
        const closedDate = data.Item.closedDate?.S || null;
        const approvedBy = data.Item.approvedBy?.S || null;

        if (closedBy) {
            return {
                statusCode: 200,
                body: JSON.stringify({
                    message: `This work order was already closed by ${closedBy} on ${closedDate}`
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }

        if (response === 'true') {
            if (approvedBy) {
                return {
                    statusCode: 200,
                    body: JSON.stringify({
                        message: `This work order was already approved by ${approvedBy} `
                    }),
                    headers: {
                        'Content-Type': 'application/json',
                        'Access-Control-Allow-Origin': '*'
                    }
                };
            }

            await updateWorkOrder(workOrderId, { approvedBy: employeeName });
            return {
                statusCode: 200,
                body: JSON.stringify({
                    message: 'Work order accepted!'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        } else if (response === 'false') {
            const formattedDate = formatDate(new Date());

            await updateWorkOrder(workOrderId, {
                closedBy: employeeName,
                closedDate: formattedDate
            });
            return {
                statusCode: 200,
                body: JSON.stringify({
                    message: 'Work order rejected/Closed.'
                }),
                headers: {
                    'Content-Type': 'application/json',
                    'Access-Control-Allow-Origin': '*'
                }
            };
        }

        return {
            statusCode: 200,
            body: JSON.stringify({
                message: 'Success!',
            }),
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            }
        };
    } catch (error) {
        console.error("Error processing request", error);
        return {
            statusCode: 500,
            body: JSON.stringify({
                message: "Error processing request",
                error: error.message
            }),
            headers: {
                'Content-Type': 'application/json',
                'Access-Control-Allow-Origin': '*'
            }
        };
    }
};

const updateWorkOrder = async (workOrderId, updateParams) => {
    try {
        const updateExpression = [];
        const expressionAttributeValues = {};
        const expressionAttributeNames = {};

        for (const [key, value] of Object.entries(updateParams)) {
            updateExpression.push(`#${key} = :${key}`);
            expressionAttributeValues[`:${key}`] = { S: value }; 
            expressionAttributeNames[`#${key}`] = key;
        }

        const params = {
            TableName: 'WorkOrder-5hshopfsv5f6vbfshkkgwtlxfq-staging',
            Key: {
                id: { S: workOrderId }
            },
            UpdateExpression: `SET ${updateExpression.join(', ')}`,
            ExpressionAttributeValues: expressionAttributeValues,
            ExpressionAttributeNames: expressionAttributeNames
        };

        await dynamoDB.updateItem(params).promise();

        return { success: true };
    } catch (error) {
        console.error('Error updating work order:', error);
        throw error;
    }
};
